/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MainGetApiKeysResp from '../model/MainGetApiKeysResp';
import MainUserStatsResponse from '../model/MainUserStatsResponse';
import UtilHttpError from '../model/UtilHttpError';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userApiKeysGet operation.
     * @callback module:api/UserApi~userApiKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MainGetApiKeysResp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API keys for a user
     * This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.
     * @param {module:api/UserApi~userApiKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MainGetApiKeysResp>}
     */
    userApiKeysGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MainGetApiKeysResp];
      return this.apiClient.callApi(
        '/user/api-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userApiKeysKeyDelete operation.
     * @callback module:api/UserApi~userApiKeysKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a User API Key.
     * This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily use to access all estuary features. This endpoint can be used to revoke the API key thats assigned to the user.
     * @param {String} key Key
     * @param {module:api/UserApi~userApiKeysKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    userApiKeysKeyDelete(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling userApiKeysKeyDelete");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/user/api-keys/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userApiKeysPost operation.
     * @callback module:api/UserApi~userApiKeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MainGetApiKeysResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API keys for a user
     * This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features.
     * @param {Object} opts Optional parameters
     * @param {String} opts.perm perm
     * @param {String} opts.expiry expiry
     * @param {module:api/UserApi~userApiKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MainGetApiKeysResp}
     */
    userApiKeysPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'perm': opts['perm'],
        'expiry': opts['expiry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MainGetApiKeysResp;
      return this.apiClient.callApi(
        '/user/api-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userExportGet operation.
     * @callback module:api/UserApi~userExportGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export user data
     * This endpoint is used to get API keys for a user.
     * @param {module:api/UserApi~userExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    userExportGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/user/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userStatsGet operation.
     * @callback module:api/UserApi~userStatsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MainUserStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API keys for a user
     * This endpoint is used to create API keys for a user.
     * @param {module:api/UserApi~userStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MainUserStatsResponse}
     */
    userStatsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MainUserStatsResponse;
      return this.apiClient.callApi(
        '/user/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
