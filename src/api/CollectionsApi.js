/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MainAddContentToCollectionParams from '../model/MainAddContentToCollectionParams';
import MainCollection from '../model/MainCollection';
import MainCreateCollectionBody from '../model/MainCreateCollectionBody';
import UtilHttpError from '../model/UtilHttpError';

/**
* Collections service.
* @module api/CollectionsApi
* @version 1.0.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the collectionsAddContentPost operation.
     * @callback module:api/CollectionsApi~collectionsAddContentPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add contents to a collection
     * When a collection is created, users with valid API keys can add contents to the collection. This endpoint can be used to add contents to a collection.
     * @param {module:model/MainAddContentToCollectionParams} body Contents to add to collection
     * @param {module:api/CollectionsApi~collectionsAddContentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    collectionsAddContentPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsAddContentPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/collections/add-content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsContentColuuidGet operation.
     * @callback module:api/CollectionsApi~collectionsContentColuuidGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contents in a collection
     * This endpoint is used to get contents in a collection. When a collection is created, this collection object is retrievable along with its content via this endpoint.
     * @param {String} coluuid coluuid
     * @param {module:api/CollectionsApi~collectionsContentColuuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    collectionsContentColuuidGet(coluuid, callback) {
      let postBody = null;
      // verify the required parameter 'coluuid' is set
      if (coluuid === undefined || coluuid === null) {
        throw new Error("Missing the required parameter 'coluuid' when calling collectionsContentColuuidGet");
      }

      let pathParams = {
        'coluuid': coluuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/collections/content/{coluuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsCreatePost operation.
     * @callback module:api/CollectionsApi~collectionsCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MainCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new collection
     * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
     * @param {module:model/MainCreateCollectionBody} body Collection name and description
     * @param {module:api/CollectionsApi~collectionsCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MainCollection}
     */
    collectionsCreatePost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling collectionsCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MainCollection;
      return this.apiClient.callApi(
        '/collections/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsFsAddPost operation.
     * @callback module:api/CollectionsApi~collectionsFsAddPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a file to a collection
     * This endpoint adds a file to a collection
     * @param {String} col Collection ID
     * @param {String} collection Collection ID Long
     * @param {String} content Content
     * @param {String} path Path to file
     * @param {module:api/CollectionsApi~collectionsFsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    collectionsFsAddPost(col, collection, content, path, callback) {
      let postBody = null;
      // verify the required parameter 'col' is set
      if (col === undefined || col === null) {
        throw new Error("Missing the required parameter 'col' when calling collectionsFsAddPost");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling collectionsFsAddPost");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling collectionsFsAddPost");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling collectionsFsAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'col': col,
        'collection': collection,
        'content': content,
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/collections/fs/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsFsListGet operation.
     * @callback module:api/CollectionsApi~collectionsFsListGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new collection
     * This endpoint creates a new collection
     * @param {String} col Collection
     * @param {String} dir Directory
     * @param {module:api/CollectionsApi~collectionsFsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    collectionsFsListGet(col, dir, callback) {
      let postBody = null;
      // verify the required parameter 'col' is set
      if (col === undefined || col === null) {
        throw new Error("Missing the required parameter 'col' when calling collectionsFsListGet");
      }
      // verify the required parameter 'dir' is set
      if (dir === undefined || dir === null) {
        throw new Error("Missing the required parameter 'dir' when calling collectionsFsListGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'col': col,
        'dir': dir
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/collections/fs/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsListGet operation.
     * @callback module:api/CollectionsApi~collectionsListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MainCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all collections
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @param {module:api/CollectionsApi~collectionsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MainCollection>}
     */
    collectionsListGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MainCollection];
      return this.apiClient.callApi(
        '/collections/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
